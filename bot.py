import logging
import os 
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters
)
import telegram

TOKEN = os.environ.get("TOKEN")
CHANNEL_USERNAME = "@atlascapitalnews"
GUIDE_FILE_PATH = "–°–ª–æ–≤–∞—Ä—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ 1.pdf"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    keyboard = [
        [InlineKeyboardButton("üì• –ü–æ–ª—É—á–∏—Ç—å –°–ª–æ–≤–∞—Ä—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞", callback_data="get_guide")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∏–¥–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=reply_markup
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = update.effective_user

    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user.id)
        if member.status in ["member", "administrator", "creator"]:
            await query.message.reply_document(open(GUIDE_FILE_PATH, "rb"))
            await query.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–æ—Ç –≤–∞—à –°–ª–æ–≤–∞—Ä—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞.")
        else:
            raise telegram.error.BadRequest("User not subscribed")
    except telegram.error.BadRequest:
        keyboard = [
            [InlineKeyboardButton("üì≤ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "üìå –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            reply_markup=reply_markup
        )

def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()

