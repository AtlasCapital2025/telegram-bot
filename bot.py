import logging
import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters
)
import telegram

# ----------------------------------------------------------------------------
# Configuration
# ----------------------------------------------------------------------------
TOKEN = os.environ.get("TOKEN", "your-token-here")
CHANNEL_USERNAME = "@atlascapitalnews"
# –û–±–Ω–æ–≤–∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
GUIDE_FILE_PATH = "–°–ª–æ–≤–∞—Ä—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞.pdf"

# ----------------------------------------------------------------------------
# Logging
# ----------------------------------------------------------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ----------------------------------------------------------------------------
# Keyboards
# ----------------------------------------------------------------------------
reply_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton("–°—Ç–∞—Ä—Ç")]],
    resize_keyboard=True
)

# ----------------------------------------------------------------------------
# Handlers
# ----------------------------------------------------------------------------
async def show_start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ä—Ç¬ª."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å! –ù–∞–∂–º–∏—Ç–µ ¬´–°—Ç–∞—Ä—Ç¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.",
        reply_markup=reply_keyboard
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_start_menu(update, context)

async def handle_start_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline‚Äë–º–µ–Ω—é –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–°—Ç–∞—Ä—Ç¬ª."""
    inline_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• –ü–æ–ª—É—á–∏—Ç—å ¬´–°–ª–æ–≤–∞—Ä—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞¬ª", callback_data="get_guide")],
        [InlineKeyboardButton("üì≤ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ ¬´–ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥¬ª."""
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    await check_subscription(query.message, context, user.id)

async def check_subscription_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª."""
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    await check_subscription(query.message, context, user.id)

async def check_subscription(target, context, user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∞–π–¥ –∏–ª–∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è."""
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if member.status in ["member", "administrator", "creator"]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF‚Äë—Ñ–∞–π–ª ¬´–°–ª–æ–≤–∞—Ä—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞¬ª
            await target.reply_document(open(GUIDE_FILE_PATH, "rb"))
            await target.reply_text(
                "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! \n"
                "–í—ã—Å—ã–ª–∞–µ–º –≤–∞–º ¬´–°–ª–æ–≤–∞—Ä—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞¬ª\n\n"
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–µ–∂–∏–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ."
            )
        else:
            raise telegram.error.BadRequest("User not subscribed")
    except telegram.error.BadRequest:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì≤ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ])
        await target.reply_text(
            "üìå –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=keyboard
        )

# ----------------------------------------------------------------------------
# Application entry point
# ----------------------------------------------------------------------------

def main():
    application = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))

    # Inline‚Äë–∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button, pattern="get_guide"))
    application.add_handler(CallbackQueryHandler(check_subscription_button, pattern="check_subscription"))

    # –°–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–°—Ç–∞—Ä—Ç$"), handle_start_button))

    # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
    application.add_handler(MessageHandler(
        filters.TEXT & filters.ChatType.PRIVATE & ~filters.Regex("^–°—Ç–∞—Ä—Ç$"),
        show_start_menu
    ))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()
