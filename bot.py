import logging
import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters
)
import telegram

TOKEN = os.environ.get("TOKEN", "your-token-here")
CHANNEL_USERNAME = "@atlascapitalnews"
GUIDE_FILE_PATH = "–°–ª–æ–≤–∞—Ä—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ 1.pdf"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    reply_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("–°—Ç–∞—Ä—Ç")]],
        resize_keyboard=True
    )

    inline_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• –ü–æ–ª—É—á–∏—Ç—å –°–ª–æ–≤–∞—Ä—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞", callback_data="get_guide")]
    ])

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∏–¥–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=reply_keyboard
    )

    await update.message.reply_text("‚¨áÔ∏è", reply_markup=inline_keyboard)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = update.effective_user

    await check_subscription(query.message, context, user.id)

async def handle_check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await check_subscription(update.message, context, user.id)

async def check_subscription(target, context, user_id):
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if member.status in ["member", "administrator", "creator"]:
            await target.reply_document(open(GUIDE_FILE_PATH, "rb"))
            await target.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–æ—Ç –≤–∞—à –°–ª–æ–≤–∞—Ä—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞.")
        else:
            raise telegram.error.BadRequest("User not subscribed")
    except telegram.error.BadRequest:
        keyboard = [
            [InlineKeyboardButton("üì≤ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await target.reply_text(
            "üìå –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=reply_markup
        )

async def check_subscription_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    await check_subscription(query.message, context, user.id)

def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button, pattern="get_guide"))
    application.add_handler(CallbackQueryHandler(check_subscription_button, pattern="check_subscription"))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–°—Ç–∞—Ä—Ç$"), handle_check_subscription))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
